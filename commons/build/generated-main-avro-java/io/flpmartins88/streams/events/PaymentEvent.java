/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.flpmartins88.streams.events;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class PaymentEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2727026096058615203L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"io.flpmartins88.streams.events\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"source\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"PaymentSource\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}]},{\"name\":\"result\",\"type\":{\"type\":\"enum\",\"name\":\"PaymentStatus\",\"symbols\":[\"PAID\",\"DECLINED\"]}},{\"name\":\"amount\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PaymentEvent> ENCODER =
      new BinaryMessageEncoder<PaymentEvent>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PaymentEvent> DECODER =
      new BinaryMessageDecoder<PaymentEvent>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<PaymentEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<PaymentEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<PaymentEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<PaymentEvent>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this PaymentEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a PaymentEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a PaymentEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static PaymentEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String id;
   private io.flpmartins88.streams.events.PaymentSource source;
   private io.flpmartins88.streams.events.PaymentStatus result;
   private long amount;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PaymentEvent() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param source The new value for source
   * @param result The new value for result
   * @param amount The new value for amount
   */
  public PaymentEvent(java.lang.String id, io.flpmartins88.streams.events.PaymentSource source, io.flpmartins88.streams.events.PaymentStatus result, java.lang.Long amount) {
    this.id = id;
    this.source = source;
    this.result = result;
    this.amount = amount;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return source;
    case 2: return result;
    case 3: return amount;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = value$ != null ? value$.toString() : null; break;
    case 1: source = (io.flpmartins88.streams.events.PaymentSource)value$; break;
    case 2: result = (io.flpmartins88.streams.events.PaymentStatus)value$; break;
    case 3: amount = (java.lang.Long)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.String getId() {
    return id;
  }



  /**
   * Gets the value of the 'source' field.
   * @return The value of the 'source' field.
   */
  public io.flpmartins88.streams.events.PaymentSource getSource() {
    return source;
  }



  /**
   * Gets the value of the 'result' field.
   * @return The value of the 'result' field.
   */
  public io.flpmartins88.streams.events.PaymentStatus getResult() {
    return result;
  }



  /**
   * Gets the value of the 'amount' field.
   * @return The value of the 'amount' field.
   */
  public long getAmount() {
    return amount;
  }



  /**
   * Creates a new PaymentEvent RecordBuilder.
   * @return A new PaymentEvent RecordBuilder
   */
  public static io.flpmartins88.streams.events.PaymentEvent.Builder newBuilder() {
    return new io.flpmartins88.streams.events.PaymentEvent.Builder();
  }

  /**
   * Creates a new PaymentEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PaymentEvent RecordBuilder
   */
  public static io.flpmartins88.streams.events.PaymentEvent.Builder newBuilder(io.flpmartins88.streams.events.PaymentEvent.Builder other) {
    if (other == null) {
      return new io.flpmartins88.streams.events.PaymentEvent.Builder();
    } else {
      return new io.flpmartins88.streams.events.PaymentEvent.Builder(other);
    }
  }

  /**
   * Creates a new PaymentEvent RecordBuilder by copying an existing PaymentEvent instance.
   * @param other The existing instance to copy.
   * @return A new PaymentEvent RecordBuilder
   */
  public static io.flpmartins88.streams.events.PaymentEvent.Builder newBuilder(io.flpmartins88.streams.events.PaymentEvent other) {
    if (other == null) {
      return new io.flpmartins88.streams.events.PaymentEvent.Builder();
    } else {
      return new io.flpmartins88.streams.events.PaymentEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for PaymentEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PaymentEvent>
    implements org.apache.avro.data.RecordBuilder<PaymentEvent> {

    private java.lang.String id;
    private io.flpmartins88.streams.events.PaymentSource source;
    private io.flpmartins88.streams.events.PaymentSource.Builder sourceBuilder;
    private io.flpmartins88.streams.events.PaymentStatus result;
    private long amount;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.flpmartins88.streams.events.PaymentEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.source)) {
        this.source = data().deepCopy(fields()[1].schema(), other.source);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasSourceBuilder()) {
        this.sourceBuilder = io.flpmartins88.streams.events.PaymentSource.newBuilder(other.getSourceBuilder());
      }
      if (isValidValue(fields()[2], other.result)) {
        this.result = data().deepCopy(fields()[2].schema(), other.result);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.amount)) {
        this.amount = data().deepCopy(fields()[3].schema(), other.amount);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing PaymentEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(io.flpmartins88.streams.events.PaymentEvent other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.source)) {
        this.source = data().deepCopy(fields()[1].schema(), other.source);
        fieldSetFlags()[1] = true;
      }
      this.sourceBuilder = null;
      if (isValidValue(fields()[2], other.result)) {
        this.result = data().deepCopy(fields()[2].schema(), other.result);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.amount)) {
        this.amount = data().deepCopy(fields()[3].schema(), other.amount);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.String getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public io.flpmartins88.streams.events.PaymentEvent.Builder setId(java.lang.String value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public io.flpmartins88.streams.events.PaymentEvent.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'source' field.
      * @return The value.
      */
    public io.flpmartins88.streams.events.PaymentSource getSource() {
      return source;
    }


    /**
      * Sets the value of the 'source' field.
      * @param value The value of 'source'.
      * @return This builder.
      */
    public io.flpmartins88.streams.events.PaymentEvent.Builder setSource(io.flpmartins88.streams.events.PaymentSource value) {
      validate(fields()[1], value);
      this.sourceBuilder = null;
      this.source = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'source' field has been set.
      * @return True if the 'source' field has been set, false otherwise.
      */
    public boolean hasSource() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'source' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.flpmartins88.streams.events.PaymentSource.Builder getSourceBuilder() {
      if (sourceBuilder == null) {
        if (hasSource()) {
          setSourceBuilder(io.flpmartins88.streams.events.PaymentSource.newBuilder(source));
        } else {
          setSourceBuilder(io.flpmartins88.streams.events.PaymentSource.newBuilder());
        }
      }
      return sourceBuilder;
    }

    /**
     * Sets the Builder instance for the 'source' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public io.flpmartins88.streams.events.PaymentEvent.Builder setSourceBuilder(io.flpmartins88.streams.events.PaymentSource.Builder value) {
      clearSource();
      sourceBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'source' field has an active Builder instance
     * @return True if the 'source' field has an active Builder instance
     */
    public boolean hasSourceBuilder() {
      return sourceBuilder != null;
    }

    /**
      * Clears the value of the 'source' field.
      * @return This builder.
      */
    public io.flpmartins88.streams.events.PaymentEvent.Builder clearSource() {
      source = null;
      sourceBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'result' field.
      * @return The value.
      */
    public io.flpmartins88.streams.events.PaymentStatus getResult() {
      return result;
    }


    /**
      * Sets the value of the 'result' field.
      * @param value The value of 'result'.
      * @return This builder.
      */
    public io.flpmartins88.streams.events.PaymentEvent.Builder setResult(io.flpmartins88.streams.events.PaymentStatus value) {
      validate(fields()[2], value);
      this.result = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'result' field has been set.
      * @return True if the 'result' field has been set, false otherwise.
      */
    public boolean hasResult() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'result' field.
      * @return This builder.
      */
    public io.flpmartins88.streams.events.PaymentEvent.Builder clearResult() {
      result = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * @return The value.
      */
    public long getAmount() {
      return amount;
    }


    /**
      * Sets the value of the 'amount' field.
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public io.flpmartins88.streams.events.PaymentEvent.Builder setAmount(long value) {
      validate(fields()[3], value);
      this.amount = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'amount' field.
      * @return This builder.
      */
    public io.flpmartins88.streams.events.PaymentEvent.Builder clearAmount() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PaymentEvent build() {
      try {
        PaymentEvent record = new PaymentEvent();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.String) defaultValue(fields()[0]);
        if (sourceBuilder != null) {
          try {
            record.source = this.sourceBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("source"));
            throw e;
          }
        } else {
          record.source = fieldSetFlags()[1] ? this.source : (io.flpmartins88.streams.events.PaymentSource) defaultValue(fields()[1]);
        }
        record.result = fieldSetFlags()[2] ? this.result : (io.flpmartins88.streams.events.PaymentStatus) defaultValue(fields()[2]);
        record.amount = fieldSetFlags()[3] ? this.amount : (java.lang.Long) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PaymentEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<PaymentEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PaymentEvent>
    READER$ = (org.apache.avro.io.DatumReader<PaymentEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.id);

    if (this.source == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.source.customEncode(out);
    }

    out.writeEnum(this.result.ordinal());

    out.writeLong(this.amount);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.source = null;
      } else {
        if (this.source == null) {
          this.source = new io.flpmartins88.streams.events.PaymentSource();
        }
        this.source.customDecode(in);
      }

      this.result = io.flpmartins88.streams.events.PaymentStatus.values()[in.readEnum()];

      this.amount = in.readLong();

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readString();
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.source = null;
          } else {
            if (this.source == null) {
              this.source = new io.flpmartins88.streams.events.PaymentSource();
            }
            this.source.customDecode(in);
          }
          break;

        case 2:
          this.result = io.flpmartins88.streams.events.PaymentStatus.values()[in.readEnum()];
          break;

        case 3:
          this.amount = in.readLong();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










